
	=======================================================================
	
	                         Framework.Client											   
								
	=======================================================================
								
	1. Introduction
	2. Framework
	3. Core Library
	4. MVC
		
	1. Introduction -------------------------------------------------------
		
	  This document describes a client-side framework. This framework is 
	divided into three main sub-systems: The core sub-system, where all 
	functionality is registered, managed and retrieved, a basic library of
	services, where a number of core functions is implemented and a compo-
	nent-based interface rendering framework, where user interfaces are 
	assembled using a pre-built, but extensible, set of components.
		
	2. Framework ----------------------------------------------------------	

	2.1 Modules
	
	2.2 Features
	
	2.3 Artifacts
	
	2.4 Singletons

	2.5 How it works
			
	3. Core Library -------------------------------------------------------

	3.1 Util

	3.2 Error

	3.3 Logging

	3.4 Strings

	3.5 Time

	3.6 Query String

	3.7 Sequence

	3.8 Loader

	3.9 DOM

	3.10 Http

	3.11 Localization

	3.12 Resources

	3.13 Events

	3.14 Drag and Drop
	
	3.15 Resolver

	3.16 Filter & Transform

	4. MVC ----------------------------------------------------------------
		
	4.1 Components

	Components are the basic building blocks for designing user interfaces.
	They are the native constructs by which we build more complex and
	useful interface experiences. They require native implementations, for
	example, in the Web-based javascript framework, components are defined
	as javascript objects.

	In our component exposition, we will divide the components into two 
	parts, its declaration and its runtime values and protocols. By protocol
	we mean a aplication programmable interface (API), a sort of service. 
	The declaration part defines statically the component, it defines its 
	name and other characterictics the component requires to function. 
	The runtime part is	a set of values and services that are only available
	when the component is executed. 
	
	At the end of this section we present a diagram where all the component 
	bits and pieces and depicted.

	4.1.1 Definition
		
		o- Name
		    Fully qualified name, with namespace separated by a dot ('.')
			e.g. 'types.forms.list', where 'types.forms' is the namespace 
			and 'list' is the local name.

		o- Description
			Small description for the component.

		o- Property Schema
			Set of properties that work as configuration values. Useful 
			for defining specific behaviour, style, constant values or
			other pertinent values. Properties are read-only values
			and are defined by:

				o- Name
				o- Display Name
				o- Type
				o- Required
				o- Default Value (default values only make sense for non-
				   required property values)

		o- Model Schema
			Set of model values. These values are similar to properties, 
			but they work as the input and output values of the component.
			Model values are the so called state of the component and are
			defined by:			

				o- Name
				o- Display Name
				o- Type
				o- Kind (IN, OUT and INOUT for values that are for input,
				   output or input/output respectively)
				o- Default Value (only aplicable for values that are
				   of kind input and input/output)

		o- Resource Schema
			Set of localized resources that the component uses. These can
			be defined locally or referenced as an external web resource,
			e.g. url for the resource set.

		o- Event Schema
			Set of events the component defines or registers. By default, all
			model values have an event 'change' that is fired whenever its 
			values changes. But the developer can also create custom events.
			 
		o- Template
			A native-based rendering template. It could be for an example,
			a piece of a HTML template with specific placeholders.

		o- Placeholders
		    Declares the component placholders. The placeholders are where
			it is possible to add children components for the current 
			component.

		o- Base
			Optional value that refers to the base component type of the 
			component that is being defined.
			
	4.1.2 Runtime

		o- Property Values
				
		o- Model Values
		
		o- Resource Values		
		
		o- Event Handlers	

		Component instance:

			- $property
			- $model
			- $resource
			- $event
	                       
                          ---------------------------------------------
	                      |                  <BASE>                   |
 	                      |-------------------------------------------|
		       		      |                                           |
			     	      .                                           .
				          .                                           .
				          .                                           .
				          |                                           |
				          ---------------------------------------------

	                                           /\
	                                           ||
	                                           ||
						  			           ||

	                    -------------------------------------------------
	                    |                 <NAME>                        |
 	                    |-----------------------------------------------|
	                    |  -----------------------------------    ----- |
	                    |  |            Property             |    |   | |
	    Property Values |  | ------------------------------- |    |   | |
	 |---------------------->|          Protocol           |<====>|   | |
	                    |  | ------------------------------- |    |   | |
		  		        |  | |    Values    |     Schema   | |    |   | |
				        |  | ------------------------------- |    |   | |
                        |  -----------------------------------    |   | |
				        |                                         |   | |
	                    |  -----------------------------------    | N | |
	                    |  |              Model              |    | A | |
	    Model Values    |  | ------------------------------- |    | T | |
	 <======================>|          Protocol           |<====>| I | |
	                    |  | ------------------------------- |    | V | |
				        |  | |    Values    |     Schema   | |    | E | |
				        |  | ------------------------------- |    |   | |
                        |  -----------------------------------    |   | |
				        |                                         | C | |
	                    |  -----------------------------------    | O | |
	                    |  |            Resource             |    | D | |
	    Resource Values |  | ------------------------------- |    | E | |
	 |---------------------->|          Protocol           |<====>|   | |
	                    |  | ------------------------------- |    |   | |
				        |  | |    Values    |     Schema   | |    |   | |
				        |  | ------------------------------- |    |   | |
                        |  -----------------------------------    |   | |
                        |                                         |   | |
	                    |  -----------------------------------    |   | |
	                    |  |              Event              |    |   | |
	    Event Handlers  |  | ------------------------------- |    |   | |
	 |---------------------->|          Protocol           |<====>|   | |
	                    |  | ------------------------------- |    |   | |
				        |  | |    Handlers  |     Schema   | |    |   | |
				        |  | ------------------------------- |    |   | |
                        |  -----------------------------------    |   | |
                        |                                         |   | |
                        |    -------------------------------      |   | |
                        |    |          Template           |----->|   | |
						|    -------------------------------      |   | |
                        |                                         |   | |
                        |    -------------------------------      |   | |
                        |    |          Placeholders       |----->|   | |
						|    -------------------------------      ----- |
	                    -------------------------------------------------


	4.2 Fragments
	
		o- Name
		o- Description
		o- Property Schema
		o- Model Schema	
		o- Resource Schema
		o- Event Schema	

		o- Master

		o- View

		o- Binding

		o- Rules
				
	4.3 Apps

